{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","IncrementItem","setState","clicks","state","DecreaseItem","ToggleClick","show","className","onClick","this","Component","Boolean","window","location","hostname","match","React","createElement","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uIC4F5BC,G,8DAhCf,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IAONC,cAAgB,WAChB,EAAKC,SAAS,CAAEC,OAAQ,EAAKC,MAAMD,OAAS,KATzB,EAWnBE,aAAe,WACf,EAAKH,SAAS,CAAEC,OAAQ,EAAKC,MAAMD,OAAS,KAZzB,EAcnBG,YAAc,WACd,EAAKJ,SAAS,CAAEK,MAAO,EAAKH,MAAMG,QAblC,EAAKH,MAAQ,CACbD,OAAQ,EACRI,MAAM,GAJa,E,qDAmBnB,OACA,yBAAKC,UAAU,WACf,4BAAQC,QAASC,KAAKT,eAAtB,2BACA,4BAAQQ,QAASC,KAAKL,cAAtB,0BACA,6BACA,yBAAKG,UAAU,eACbE,KAAKN,MAAMG,KAAO,4BAAMG,KAAKN,MAAMD,QAAgB,S,GA1BnCQ,cC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXOC,IAAMC,cAAc,KAAK,CAACV,UAAU,YAAY,gBAC7DW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAKFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.623bdc99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n/*import data from \"../data.json\";\nimport {Route, Link, BrowserRouter} from 'react-router-dom';\nimport Resume from \"./components/Resume\";\n//import Home from \"./components/Home\";*/\n//function App() {\n  //return (\n    //<div className=\"App\">\n  {/*<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n  </header>*/}\n  //<BrowserRouter>\n  //<Route exact path=\"/\" component={Home}/>\n  //<Route path=\"/resume\" component={Resume}/>\n  //  </BrowserRouter>\n  //  </div>\n  //);\n//}\n//var profile;\n//let Home=()=>{\n  //let profile=data.profiles;\n  //console.log(profile);\n\n  //return(\n  //<div className=\"row justify-content-center\">\n //   {profile.map((value,index)=>(\n   //   <div className=\"col-sm-10 col-md-4 col-lg-4 mt-1\" key={index}>\n     //   <div className=\"card\">\n       //   <div className=\"card-body\">\n         //   <img src={\"./logo.svg\"} alt=\"Profile Icon\" style={{width:\"10em\"}}/>\n           // <h1>{value.basic.name}</h1>\n//\n  //         <Link to={{pathname:\"/resume\", data:{i:index}}} className=\"btn btn-primary\">Profile </Link>\n    //      </div>\n      //  </div>\n      //</div>\n    //))\n    //}\n  //</div>\n//);\n//}\n//export default App;\n\n\n\nclass App extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nclicks: 0,\nshow: true\n};\n}\n\nIncrementItem = () => {\nthis.setState({ clicks: this.state.clicks + 1 });\n}\nDecreaseItem = () => {\nthis.setState({ clicks: this.state.clicks - 1 });\n}\nToggleClick = () => {\nthis.setState({ show: !this.state.show });\n}\n\nrender() {\nreturn (\n<div className=\"App-cal\">\n<button onClick={this.IncrementItem}>Click to increment by 1</button>\n<button onClick={this.DecreaseItem}>Click to decrease by 1</button>\n<br/>\n<div className=\"App-counter\">\n{ this.state.show ? <h2>{ this.state.clicks }</h2> : '' }\n</div>\n</div>\n);\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nvar element =React.createElement('h1',{className:'greeting'},'Hello world!');\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  //element,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}